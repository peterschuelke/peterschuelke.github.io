{"version":3,"file":"ArticlesCell.stories-BxmxC1gj.js","sources":["../../../src/components/ArticlesCell/ArticlesCell.tsx","../../../src/components/ArticlesCell/ArticlesCell.mock.ts","../../../src/components/ArticlesCell/ArticlesCell.stories.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport Article from 'src/components/Article/Article'\nimport { loadArticles } from 'src/utils/staticData'\nimport { useQuery } from '@redwoodjs/web'\n\n// Only use GraphQL in development\nconst QUERY = process.env.NODE_ENV === 'development' ? gql`\n  query ArticlesQuery {\n    articles: posts {\n      id\n      title\n      body\n      createdAt\n    }\n  }\n` : null\n\nexport const Loading = () => <div>Loading...</div>\n\nexport const Empty = () => <div>No articles yet!</div>\n\nexport const Failure = ({ error }) => (\n  <div className=\"rw-cell-error\">{error?.message}</div>\n)\n\nexport const Success = ({ articles }) => {\n  return (\n    <div className=\"articles\">\n      {articles.map((article) => (\n        <Article post={article} key={article.id} summary={true} />\n      ))}\n    </div>\n  )\n}\n\n// GraphQL version for development\nconst ArticlesCell = () => {\n  const { loading, error, data } = useQuery(QUERY)\n\n  if (loading) return <Loading />\n  if (error) return <Failure error={error} />\n  if (!data?.articles?.length) return <Empty />\n\n  return <Success articles={data.articles} />\n}\n\n// Static data version for production\nconst StaticArticlesCell = () => {\n  const [articles, setArticles] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    const fetchArticles = async () => {\n      try {\n        const data = await loadArticles()\n        if (data) {\n          setArticles(data)\n        }\n      } catch (err) {\n        setError(err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchArticles()\n  }, [])\n\n  if (loading) return <Loading />\n  if (error) return <Failure error={error} />\n  if (!articles.length) return <Empty />\n\n  return <Success articles={articles} />\n}\n\nexport default process.env.NODE_ENV === 'development' ? ArticlesCell : StaticArticlesCell","// Define your own mock data here:\nexport const standard = (/* vars, { ctx, req } */) => ({\n  articles: [\n    {\n      __typename: 'Post' as const,\n      id: 42,\n      title: 'First Post',\n      body: 'This is the first post',\n      createdAt: '2024-01-01T00:00:00.000Z',\n    },\n    {\n      __typename: 'Post' as const,\n      id: 43,\n      title: 'Second Post',\n      body: 'This is the second post',\n      createdAt: '2024-01-02T00:00:00.000Z',\n    },\n    {\n      __typename: 'Post' as const,\n      id: 44,\n      title: 'Third Post',\n      body: 'This is the third post',\n      createdAt: '2024-01-03T00:00:00.000Z',\n    },\n  ],\n})\n","import type { Meta, StoryObj } from '@storybook/react'\n\nimport { Loading, Empty, Failure, Success } from './ArticlesCell'\nimport { standard } from './ArticlesCell.mock'\n\nconst meta: Meta = {\n  title: 'Cells/ArticlesCell',\n  tags: ['autodocs'],\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '2em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n}\n\nexport default meta\n\nexport const loading: StoryObj<typeof Loading> = {\n  render: () => <Loading />,\n}\n\nexport const empty: StoryObj<typeof Empty> = {\n  render: () => <Empty />,\n}\n\nexport const failure: StoryObj<typeof Failure> = {\n  render: (args) => <Failure error={new Error('Oh no')} {...args} />,\n}\n\nexport const success: StoryObj<typeof Success> = {\n  render: (args) => <Success {...standard()} {...args} />,\n}\n"],"names":["Loading","jsx","Empty","Failure","error","message","Success","articles","map","article","id","__docgenInfo","standard","__typename","title","body","createdAt","meta","decorators","margin","Story","failure","render","args"],"mappings":";;;AAiBO,MAAMA,UAAUA,MAAOC,kCAAAA,IAAA,OAAA,EAAI,UAAU,cAAA;AAErC,MAAMC,QAAQA,MAAOD,kCAAAA,IAAA,OAAA,EAAI,UAAgB,oBAAA;AAEzC,MAAME,UAAUA,CAAC;AAAA,EAAEC;AAAM,MAC7BH,kCAAA,IAAA,OAAA,EAAI,WAAU,iBAAiBG,yCAAOC,SAAQ;AAG1C,MAAMC,UAAUA,CAAC;AAAA,EAAEC;AAAS,MAAM;+CAEpC,OAAI,EAAA,WAAU,YACZA,UAAAA,SAASC,IAAKC,CACb,YAAAR,kCAAA,IAAC,SAAQ,EAAA,MAAMQ,SAA0B,SAAS,KAAA,GAArBA,QAAQC,GACtC,GACH;AAEJ;AA2CwFV,QAAAW,eAAA;AAAA,EAAA,eAAA;AAAA,EAAA,WAAA,CAAA;AAAA,EAAA,eAAA;AAAA;AAAAT,MAAAS,eAAA;AAAA,EAAA,eAAA;AAAA,EAAA,WAAA,CAAA;AAAA,EAAA,eAAA;AAAA;AAAAR,QAAAQ,eAAA;AAAA,EAAA,eAAA;AAAA,EAAA,WAAA,CAAA;AAAA,EAAA,eAAA;AAAA;AAAAL,QAAAK,eAAA;AAAA,EAAA,eAAA;AAAA,EAAA,WAAA,CAAA;AAAA,EAAA,eAAA;AAAA;AC3EjF,MAAMC,WAAWA,OAA+B;AAAA,EACrDL,UAAU,CACR;AAAA,IACEM,YAAY;AAAA,IACZH,IAAI;AAAA,IACJI,OAAO;AAAA,IACPC,MAAM;AAAA,IACNC,WAAW;AAAA,EAAA,GAEb;AAAA,IACEH,YAAY;AAAA,IACZH,IAAI;AAAA,IACJI,OAAO;AAAA,IACPC,MAAM;AAAA,IACNC,WAAW;AAAA,EAAA,GAEb;AAAA,IACEH,YAAY;AAAA,IACZH,IAAI;AAAA,IACJI,OAAO;AAAA,IACPC,MAAM;AAAA,IACNC,WAAW;AAAA,EACZ,CAAA;AAEL;MClBMC,OAAa;AAAA,EACjBC,OAAU;AAAA,EAEQC,MAAAA,CAAAA,UAAQ;AAAA,EAAMD,YAAE,CACpCE,CACM,UAAAnB,kCAAA,IAAA,SAAK,OACN;AAAA,IAAAkB,QAAA;AAAA,EAEJ,GAAA,UAAAlB,kCAAA,IAAA,OAAA,CAAA,CAAA,EAAA,CAED,CAEO;AAEP;AAMA,MAAaoB,UAAoC;AAAA,EAC/CC,QAASC,MAAItB,sCAAA,SAAa,CAAA,CAAA;AAC5B;AAGEqB,MAASC,QAAkC;AAAA,EAC5CD,QAAAA,MAAArB,sCAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}