{"version":3,"file":"Project-CgGFkVII.js","sources":["../../../src/components/Project/Project/Project.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { useQuery } from '@redwoodjs/web'\nimport { gql } from '@apollo/client'\nimport { Link, routes } from '@redwoodjs/router'\nimport { loadProject } from 'src/utils/staticData'\nimport './Project.pcss'\n\n// Only use GraphQL in development\nconst QUERY = process.env.NODE_ENV === 'development' ? gql`\n  query ProjectQuery($id: Int!) {\n    project(id: $id) {\n      id\n      title\n      description\n      summary\n      image\n      link\n      role\n      skills {\n        id\n        title\n      }\n    }\n  }\n` : null\n\nexport const Loading = () => <div>Loading...</div>\n\nexport const Empty = () => <div>Project not found</div>\n\nexport const Failure = ({ error }) => (\n  <div className=\"rw-cell-error\">{error?.message}</div>\n)\n\ninterface SuccessProps {\n  project: {\n    id: number\n    title: string\n    description: string\n    summary: string\n    image: string\n    link: string\n    role: string\n    skills: {\n      id: number\n      title: string\n    }[]\n  }\n}\n\nexport const Success = ({ project }: SuccessProps) => {\n  return (\n    <article className=\"project\">\n      <div className=\"project__content\">\n        <img\n          src={project.image}\n          alt={project.title}\n          className=\"project__image\"\n        />\n        <h3 className=\"project__title\">\n          <Link to={routes.project({ id: project.id })}>{project.title}</Link>\n        </h3>\n        <p className=\"project__summary\">{project.summary}</p>\n        <p className=\"project__description\">{project.description}</p>\n        <p className=\"project__role\">Role: {project.role}</p>\n        <div className=\"project__skills\">\n          {project.skills && project.skills.map((skill) => (\n            <span key={skill.id} className=\"project__skill-tag\">\n              {skill.title}\n            </span>\n          ))}\n        </div>\n        <div className=\"project__links\">\n          <a\n            href={project.link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"project__link\"\n          >\n            Visit the Project\n          </a>\n        </div>\n      </div>\n    </article>\n  )\n}\n\n// GraphQL version for development\nconst ProjectCell = ({ id }) => {\n  const { loading, error, data } = useQuery(QUERY, {\n    variables: { id },\n  })\n\n  if (loading) return <Loading />\n  if (error) return <Failure error={error} />\n  if (!data?.project) return <Empty />\n\n  return <Success project={data.project} />\n}\n\n// Static data version for production\nconst StaticProjectCell = ({ id }) => {\n  const [project, setProject] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    const fetchProject = async () => {\n      try {\n        const data = await loadProject(id)\n        if (data) {\n          setProject(data)\n        }\n      } catch (err) {\n        setError(err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchProject()\n  }, [id])\n\n  if (loading) return <Loading />\n  if (error) return <Failure error={error} />\n  if (!project) return <Empty />\n\n  return <Success project={project} />\n}\n\nexport default process.env.NODE_ENV === 'development' ? ProjectCell : StaticProjectCell\n"],"names":["Loading","jsx","Empty","Failure","error","message","Success","project","jsxs","image","title","routes","id","summary","description","role","skills","map","skill","link","StaticProjectCell","setProject","useState","loading","setLoading","setError","useEffect","fetchProject","data","loadProject","err"],"mappings":";;AA0BO,MAAMA,UAAUA,MAAOC,kCAAAA,IAAA,OAAA,EAAI,UAAU,cAAA;AAErC,MAAMC,QAAQA,MAAOD,kCAAAA,IAAA,OAAA,EAAI,UAAiB,qBAAA;AAE1C,MAAME,UAAUA,CAAC;AAAA,EAAEC;AAAM,MAC7BH,kCAAA,IAAA,OAAA,EAAI,WAAU,iBAAiBG,yCAAOC,SAAQ;AAmB1C,MAAMC,UAAUA,CAAC;AAAA,EAAEC;AAAsB,MAAM;+CAEjD,WAAQ,EAAA,WAAU,WACjB,UAACC,kCAAA,KAAA,OAAA,EAAI,WAAU,oBACb,UAAA;AAAA,IAACP,kCAAAA,IAAA,OAAA,EACC,KAAKM,QAAQE,OACb,KAAKF,QAAQG,OACb,WAAU,iBAAA,CAAe;AAAA,IAE3BT,kCAAAA,IAAC,QAAG,WAAU,kBACZ,gDAAC,MAAK,EAAA,IAAIU,YAAOJ,QAAQ;AAAA,MAAEK,IAAIL,QAAQK;AAAAA,IAAI,CAAA,GAAIL,UAAQG,QAAAA,MAAAA,CAAM,GAC/D;AAAA,IACCT,kCAAA,IAAA,KAAA,EAAE,WAAU,oBAAoBM,kBAAQM,SAAQ;AAAA,IAChDZ,kCAAA,IAAA,KAAA,EAAE,WAAU,wBAAwBM,kBAAQO,aAAY;AAAA,IACxDN,kCAAAA,KAAA,KAAE,EAAA,WAAU,iBAAgB,UAAA;AAAA,MAAA;AAAA,MAAOD,QAAQQ;AAAAA,IAAAA,GAAK;AAAA,0CAChD,OAAI,EAAA,WAAU,mBACZR,UAAQS,QAAAA,UAAUT,QAAQS,OAAOC,IAAKC,iDACpC,QAAA,EAAoB,WAAU,sBAC5BA,UAAAA,MAAMR,SADEQ,MAAMN,EAEjB,CACD,EAAA,CACH;AAAA,0CACC,OAAI,EAAA,WAAU,kBACb,UAAAX,kCAAA,IAAC,OACC,MAAMM,QAAQY,MACd,QAAO,UACP,KAAI,uBACJ,WAAU,iBAAc,+BAG1B,EACF,CAAA;AAAA,EAAA,EAAA,CACF,EAAA,CACF;AAEJ;AAgBA,MAAMC,oBAAoBA,CAAC;AAAA,EAAER;AAAG,MAAM;AACpC,QAAM,CAACL,SAASc,UAAU,IAAIC,aAAAA,SAAS,IAAI;AAC3C,QAAM,CAACC,SAASC,UAAU,IAAIF,aAAAA,SAAS,IAAI;AAC3C,QAAM,CAAClB,OAAOqB,QAAQ,IAAIH,aAAAA,SAAS,IAAI;AAEvCI,eAAAA,UAAU,MAAM;AACd,UAAMC,eAAe,YAAY;AAC3B,UAAA;AACIC,cAAAA,OAAO,MAAMC,YAAYjB,EAAE;AACjC,YAAIgB,MAAM;AACRP,qBAAWO,IAAI;AAAA,QAAA;AAAA,eAEVE,KAAK;AACZL,iBAASK,GAAG;AAAA,MAAA,UACJ;AACRN,mBAAW,KAAK;AAAA,MAAA;AAAA,IAEpB;AAEa,iBAAA;AAAA,EAAA,GACZ,CAACZ,EAAE,CAAC;AAEHW,MAAAA,QAAgB,QAACtB,sCAAA,SAAS,CAAA,CAAA;AAC9B,MAAIG,MAAe,QAAAH,kCAAAA,IAAA,SAAA,EAAQ,OAAe;AAC1C,MAAI,CAACM,QAAgB,QAACN,sCAAA,OAAO,CAAA,CAAA;AAEtB,SAACA,sCAAA,WAAQ,SAAmB;AACrC;AAEA,MAAA,UAAsEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}